name: CI/CD Pipeline for C/C++ Project

on:
  push:
    branches: [ main ]

jobs:
  test_and_mirror:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install build tools
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get install -y build-essential cmake make g++ gcc libconfig++-dev

      - name: Check for compilation type
        id: check-type
        run: |
          if [ -f "CMakeLists.txt" ]; then
            echo "PROJECT_TYPE=cmake" >> "$GITHUB_OUTPUT"
          else
            echo "PROJECT_TYPE=make" >> "$GITHUB_OUTPUT"
          fi

      - name: Start time calculation - Build
        id: build-time-start
        run: |
          echo "START_TIME=`date +%s`" >> "$GITHUB_OUTPUT"

      - name: Run Compilation
        id: compilation
        run: |
          {
            echo 'COMPILATION_OUTPUT<<EOF'
            if [ '${{ steps.check-type.outputs.PROJECT_TYPE }}' == 'cmake' ]; then
              echo "=== Building project using CMake ==="
              mkdir -p ./build/
              cd ./build/
              cmake ..
            fi
            echo "=== Cleaning project ==="
            make clean
            echo "=== Building project ==="
            make
            make clean
            echo EOF
            if [ '${{ steps.check-type.outputs.PROJECT_TYPE }}' == 'cmake' ]; then
              cd ..
            fi
          } >> "$GITHUB_OUTPUT"

      - name: Get time calculation - Build
        id: build-time
        run: |
          end_time=`date +%s`
          start_time=${{ steps.build-time-start.outputs.START_TIME }}
          time_diff=$((end_time - start_time))
          echo "Time Difference: $time_diff seconds"
          echo "TIME_TAKEN=$time_diff seconds" >> "$GITHUB_OUTPUT"

      - name: Start time calculation - Unit Tests
        id: unit-tests-time-start
        run: |
          echo "START_TIME=`date +%s`" >> "$GITHUB_OUTPUT"

      - name: Run unit tests
        id: unit-tests
        run: |
          {
            echo 'UNIT_TESTS_OUTPUT<<EOF'
            echo "=== Running unit tests ==="
            cd ./tests/
            ./run_unit_tests.sh
            cd ./../
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Get time calculation - Unit Tests
        id: unit-tests-time
        run: |
          end_time=`date +%s`
          start_time=${{ steps.unit-tests-time-start.outputs.START_TIME }}
          time_diff=$((end_time - start_time))
          echo "Time Difference: $time_diff seconds"
          echo "TIME_TAKEN=$time_diff seconds" >> "$GITHUB_OUTPUT"

      - name: Mirror project to school repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ secrets.TARGET_REPOSITORY }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Send build report to Discord
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          content: ""
          username: "Github - ${{ github.actor }}"
          avatar-url: "https://github.com/${{ github.actor }}.png"
          embed-title: ":white_check_mark: **Action Successful** :white_check_mark:"
          embed-author-name: ${{ github.actor }}
          embed-color: 7844437
          embed-url: "${{ github.event.head_commit.url }}"
          embed-author-url: "https://github.com/${{ github.actor }}"
          embed-author-icon-url: "https://github.com/${{ github.actor }}.png"
          embed-description: "**${{ github.event.repository.owner.name }}/${{ github.event.repository.name }}**

[${{ github.event.head_commit.message }}](${{ github.event.head_commit.url }})

Commit ID: ${{ github.event.head_commit.id }}

Pushed by ${{ github.event.pusher.email }}

Compilation type: ${{ steps.check-type.outputs.PROJECT_TYPE }}

Compilation output: ```${{ steps.compilation.outputs.COMPILATION_OUTPUT }}
```

Compilation time: `${{ steps.build-time.outputs.TIME_TAKEN }}`

Unit testing output: ```${{ steps.unit-tests.outputs.UNIT_TESTS_OUTPUT }}
```

Unit testing time: `${{ steps.unit-tests-time.outputs.TIME_TAKEN }}`"

      - name: Send error message to Discord on failure
        if: always() && failure()
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          content: ""
          username: "Github - ${{ github.actor }}"
          avatar-url: "https://github.com/${{ github.actor }}.png"
          embed-title: ":x: **Action failed** :x:"
          embed-author-name: ${{ github.actor }}
          embed-color: 16273737
          embed-url: "${{ github.event.head_commit.url }}"
          embed-author-url: "https://github.com/${{ github.actor }}"
          embed-author-icon-url: "https://github.com/${{ github.actor }}.png"
          embed-description: "**${{ github.event.repository.owner.name }}/${{ github.event.repository.name }}**

[${{ github.event.head_commit.message }}](${{ github.event.head_commit.url }})

Commit ID: ${{ github.event.head_commit.id }}

Pushed by ${{ github.event.pusher.email }}

Compilation type: ${{ steps.check-type.outputs.PROJECT_TYPE }}

Compilation output: ```${{ steps.compilation.outputs.COMPILATION_OUTPUT }}
```

Compilation time: `${{ steps.build-time.outputs.TIME_TAKEN }}`

Unit testing output: ```${{ steps.unit-tests.outputs.UNIT_TESTS_OUTPUT }}
```

Unit testing time: `${{ steps.unit-tests-time.outputs.TIME_TAKEN }}`

Coding style output: ```${{ steps.coding-style.outputs.CODING_STYLE_OUTPUT }}
```

Coding style time: `${{ steps.coding-style-time.outputs.TIME_TAKEN }}`"

